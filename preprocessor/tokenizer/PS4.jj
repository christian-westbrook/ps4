//=================================================================================================
// Program		: 
// Class		: PS4.jj
// Developers	: Renae Fisher
// Abstract		:
//=================================================================================================

options
{
	static = false;
}

PARSER_BEGIN(PS4Tokenizer)

import java.io.*;
import java.util.Random;

public class PS4Tokenizer
{
	public static void main(String[] args) throws ParseException, IOException
  	{
		if(args.length != 1)
		{
			System.out.println("ERROR: Invalid arguments specified\n");
			System.out.println("Please run this program with the following syntax: java PS4Tokenizer.java <path of input dir>");
			System.exit(1);
		}
		else
		{
			File indir = new File(args[0]);
			File testOutDir = new File("./test-data/");
			File trainOutDir = new File("./train-data/");

			if(!testOutDir.exists())
				testOutDir.mkdir();
			
			if(!trainOutDir.exists())
				trainOutDir.mkdir();

			File[] files = indir.listFiles();

			for(File file : files)
				tokenize(file, testOutDir, trainOutDir);
		}
  	}

  	private static void tokenize(File input, File testOutDir, File trainOutDir) throws ParseException, IOException
  	{
		BufferedReader br = new BufferedReader(new FileReader(input));
		PS4Tokenizer u = new PS4Tokenizer(br);
  		Token t;

		// Provide correct format for directories
		
		String testOutPath = testOutDir.getName();
		if(testOutPath.charAt(testOutPath.length() - 1) != '/')
			testOutPath = testOutPath + "/";
			
		String trainOutPath = trainOutDir.getName();
		if(trainOutPath.charAt(trainOutPath.length() - 1) != '/')
			trainOutPath = trainOutPath + "/";
	
		// Create test-data output
	
		String testOutputName = testOutPath +"test-"+ input.getName() + ".out";
  		File testOutput = new File(testOutputName);
		
		if(testOutput.exists())
			testOutput.delete();
			
  		testOutput.createNewFile();
  		BufferedWriter bw1 = new BufferedWriter(new FileWriter(testOutput));
		
		// Create training-data output
		
		String trainOutputName = trainOutPath +"train-"+ input.getName() + ".out";
  		File trainOutput = new File(trainOutputName);
		
		if(trainOutput.exists())
			trainOutput.delete();
  	
  		trainOutput.createNewFile();
  		BufferedWriter bw2 = new BufferedWriter(new FileWriter(trainOutput));
		
		// Every five items, we pick on line at random to be written to test-data or training-data.
        // We may either write the entire line as is, or write it to a tokens file.
        
		Random rand = new Random();
		boolean rollNext = true;
        boolean newline;
		int roll = 0;
        int step = 1;

		do {

            t = u.getNextToken();
            newline = PS4Tokenizer.tokenImage[ t.kind ].equalsIgnoreCase("<NEWLINE>");
            
            if(rollNext) {
				roll = rand.nextInt(5)+1;
				rollNext = false;
			}

			if(step == roll) {
			
				if(newline) {
					
					bw1.write("\n");
					
				} else {
					bw1.write(t.image.toLowerCase() + " ");
				}
				
			} else {
			
				if(!newline) {
					
					bw2.write(t.image.toLowerCase() + "\n");
					
				}
				
			}
			
			if(newline) {

                step++;
                
                if(step == 6) {
                    step = 1;
                    rollNext = true;
                }
                
            }
		
		} while ( t.kind != PS4TokenizerConstants.EOF );

  		br.close();
  		bw1.close();
		bw2.close();
		
  	}
}

PARSER_END(PS4Tokenizer)

TOKEN_MGR_DECLS : {
	
}

SKIP : {

  < SPACE : (" "|"\\s")+ >
| < TAB : ("\t")+ >
| < CR : ("\r")+ >
| < OPERATOR : ["+","-","*","/"]|("&gt;") >
| < PUNCTUATION : (","|"?"|"!"|":"|"'"|"-"|"."|"&"|"/")+>
| < SPECIAL_ENTITY : ("&"(["a"-"z","A"-"Z"])+";"|"&#"(["0"-"9"])+";") >

}

// Skip tokens that are probably not relevant.

SKIP : {
  
  < EMAIL: (["a"-"z","A"-"Z","0"-"9"])+"@"((".")?["a"-"z","A"-"Z","0"-"9"])+ >
| < DOMAIN : "@"((".")?["a"-"z","A"-"Z"])+ >
| < PHONE_NUMBER :  (("(")?["0"-"9"]["0"-"9"]["0"-"9"](")")?(< SPACE >|"-"|".")+)+["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"] >
| < EQUATION : ((["0"-"9"])+(< SPACE >)?(< OPERATOR >)?(< SPACE >)?)+(< SPACE >)?("="(< SPACE >)?(["0"-"9"](".")?)+)? >
| < NUMBER      : ((".")?(["0"-"9"])+(",")?)+ >

}

// We're specifically looking for words.

TOKEN : {

  < WORD2 : (["a"-"z","A"-"Z"])+"'"(["a"-"z","A"-"Z"])+ >
| < WORD  : (["a"-"z","A"-"Z"])+ >
| < NEWLINE : ("\n"|("?"|"!"|"."))+ >
| < MISC  : ~[] >

}
