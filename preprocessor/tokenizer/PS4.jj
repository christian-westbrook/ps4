//=================================================================================================
// Program		: 
// Class		: PS4.jj
// Developers	: Renae Fisher
// Abstract		:
//=================================================================================================

options {
	static = false;
}

PARSER_BEGIN(PS4Tokenizer)

import java.io.*;
import java.util.Random;
import java.util.HashMap;

public class PS4Tokenizer {
    
    static HashMap <String, Integer> stats;

	public static void main(String[] args) throws ParseException, IOException {
		
        if(args.length == 1) {

            String[] dirNames = {"./test-data/","./train-data/","./stats/"};
            
            // Create directories for test data, training data, and stats.
            setupOutputDirs(dirNames);
 
            // Begin to tokenize each file.
            File indir = new File(args[0]);
			File[] files = indir.listFiles();
            
            stats = new HashMap<String, Integer>(files.length * 2);

			for(File file : files) {
				tokenize(file, dirNames[0], dirNames[1]);
            }
            
            // Write stats to disk.

            File f = new File("./stats/stats.map");

            f.createNewFile();
            FileOutputStream fos = new FileOutputStream(f);
            ObjectOutputStream foos = new ObjectOutputStream(fos);
            foos.writeObject(stats);
            foos.close();
            
		} else {
			System.out.println("ERROR: Invalid arguments specified\n");
			System.out.println("Please run this program with the following syntax: java PS4Tokenizer.java <path of input dir>");
			System.exit(1);
		}
  	}

    private static void setupOutputDirs(String[] dirNames) {
 
        for(int i = 0; i < dirNames.length; i++) {
         
            File dir = new File(dirNames[i]);
            
            if(!dir.exists()) {
                dir.mkdir();
            }
            
        }
        
    }
    
    private static BufferedWriter setupOutputFile(String fileName) throws IOException {
     
        File output = new File(fileName);
    
        if(output.exists())
            output.delete();
            
        output.createNewFile();
        
        return new BufferedWriter(new FileWriter(output));

    }
  	
  	private static void tokenize(File input, String testOutPath, String trainOutPath) throws ParseException, IOException {
        
        String[] fileNames = {"test-"+input.getName()+".out"
            ,"train-"+input.getName()+".out"};

		// Create test-data output
  		BufferedWriter bw1 = setupOutputFile(testOutPath+fileNames[0]);
    
		// Create training-data output
		BufferedWriter bw2 = setupOutputFile(trainOutPath+fileNames[1]);
        
        // Open input file & begen to filter tokens.
		BufferedReader br = new BufferedReader(new FileReader(input));
		PS4Tokenizer u = new PS4Tokenizer(br);
  		Token t;
        Token p = null;

		// Every five items, we pick on line at random to be written to test-data or training-data.
        // We may either write the entire line as is, or write it to a tokens file.
        
		Random rand = new Random();
		boolean rollNext = true;
        boolean newline;
		int roll = 0;
        int step = 1;
        
        // Count the numer of lines, which is used in further calculations.
        int count = 0;

		do {

            t = u.getNextToken();
            newline = PS4Tokenizer.tokenImage[ t.kind ].equalsIgnoreCase("<NEWLINE>");
            
            if(rollNext) {
				roll = rand.nextInt(5)+1;
				rollNext = false;
			}

			if(step == roll) {
			
				if(newline) {
					
					bw1.write("\n");
					
				} else {
					bw1.write(t.image.toLowerCase() + " ");
				}
				
			} else {
			
				if(!newline) {
					
					bw2.write(t.image.toLowerCase() + "\n");
					
				}
				
			}

			if(newline) {

                step++;

                if(step == 6) {
                    step = 1;
                    rollNext = true;
                }
                
                if( p != null ) {
                 
                    if(Character.isLetter(p.image.charAt(0))) {
                        count++;
                    }

                } else {
                 
                    count++;
                    
                }
                
            }
            
            p = t;
		
		} while ( t.kind != PS4TokenizerConstants.EOF );

        /*
        if(roll > step) {
         
            System.out.println("TRUE!");
        
        }*/
        
        // Save file stats.
        
        stats.put(fileNames[1],count);

  		br.close();
  		bw1.close();
		bw2.close();

  	}
}

PARSER_END(PS4Tokenizer)

TOKEN_MGR_DECLS : {
	
}

SKIP : {

  < SPACE : (" "|"\\s")+ >
| < TAB : ("\t")+ >
| < CR : ("\r")+ >
| < OPERATOR : ["+","-","*","/"]|("&gt;") >
| < PUNCTUATION : (","|"?"|"!"|":"|"'"|"-"|"."|"&"|"/")+>
| < SPECIAL_ENTITY : ("&"(["a"-"z","A"-"Z"])+";"|"&#"(["0"-"9"])+";") >

}

// Skip tokens that are probably not relevant.

SKIP : {
  
  < EMAIL: (["a"-"z","A"-"Z","0"-"9"])+"@"((".")?["a"-"z","A"-"Z","0"-"9"])+ >
| < DOMAIN : "@"((".")?["a"-"z","A"-"Z"])+ >
| < PHONE_NUMBER :  (("(")?["0"-"9"]["0"-"9"]["0"-"9"](")")?(< SPACE >|"-"|".")+)+["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"] >
| < EQUATION : ((["0"-"9"])+(< SPACE >)?(< OPERATOR >)?(< SPACE >)?)+(< SPACE >)?("="(< SPACE >)?(["0"-"9"](".")?)+)? >
| < NUMBER      : ((".")?(["0"-"9"])+(",")?)+ >

}

// We're specifically looking for words.

TOKEN : {

  < WORD2 : (["a"-"z","A"-"Z"])+"'"(["a"-"z","A"-"Z"])+ >
| < WORD  : (["a"-"z","A"-"Z"])+ >
| < NEWLINE : ("\n"|("?"|"!"|"."))+ >
| < MISC  : ~[] >

}
