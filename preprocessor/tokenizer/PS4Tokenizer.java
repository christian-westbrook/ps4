/* Generated By:JavaCC: Do not edit this line. PS4Tokenizer.java */
import java.io.*;
import java.util.Random;

public class PS4Tokenizer implements PS4TokenizerConstants {
        public static void main(String[] args) throws ParseException, IOException
        {
                if(args.length != 1)
                {
                        System.out.println("ERROR: Invalid arguments specified\u005cn");
                        System.out.println("Please run this program with the following syntax: java PS4Tokenizer.java <path of input dir>");
                        System.exit(1);
                }
                else
                {
                        File indir = new File(args[0]);
                        File testOutDir = new File("./test-data/");
                        File trainOutDir = new File("./train-data/");

                        if(!testOutDir.exists())
                                testOutDir.mkdir();

                        if(!trainOutDir.exists())
                                trainOutDir.mkdir();

                        File[] files = indir.listFiles();

                        for(File file : files)
                                tokenize(file, testOutDir, trainOutDir);
                }
        }

        private static void tokenize(File input, File testOutDir, File trainOutDir) throws ParseException, IOException
        {
                BufferedReader br = new BufferedReader(new FileReader(input));
                PS4Tokenizer u = new PS4Tokenizer(br);
                Token t;

                // Provide correct format for directories

                String testOutPath = testOutDir.getName();
                if(testOutPath.charAt(testOutPath.length() - 1) != '/')
                        testOutPath = testOutPath + "/";

                String trainOutPath = trainOutDir.getName();
                if(trainOutPath.charAt(trainOutPath.length() - 1) != '/')
                        trainOutPath = trainOutPath + "/";

                // Create test-data output

                String testOutputName = testOutPath +"test-"+ input.getName() + ".out";
                File testOutput = new File(testOutputName);

                if(testOutput.exists())
                        testOutput.delete();

                testOutput.createNewFile();
                BufferedWriter bw1 = new BufferedWriter(new FileWriter(testOutput));

                // Create training-data output

                String trainOutputName = trainOutPath +"train-"+ input.getName() + ".out";
                File trainOutput = new File(trainOutputName);

                if(trainOutput.exists())
                        trainOutput.delete();

                trainOutput.createNewFile();
                BufferedWriter bw2 = new BufferedWriter(new FileWriter(trainOutput));

                // Every five items, we pick on line at random to be written to test-data or training-data.
        // We may either write the entire line as is, or write it to a tokens file.

                Random rand = new Random();
                boolean rollNext = true;
        boolean newline;
                int roll = 0;
        int step = 1;

                do {

            t = u.getNextToken();
            newline = PS4Tokenizer.tokenImage[ t.kind ].equalsIgnoreCase("<NEWLINE>");

            if(rollNext) {
                                roll = rand.nextInt(5)+1;
                                rollNext = false;
                        }

                        if(step == roll) {

                                if(newline) {

                                        bw1.write("\u005cn");

                                } else {
                                        bw1.write(t.image.toLowerCase() + " ");
                                }

                        } else {

                                if(!newline) {

                                        bw2.write(t.image.toLowerCase() + "\u005cn");

                                }

                        }

                        if(newline) {

                step++;

                if(step == 6) {
                    step = 1;
                    rollNext = true;
                }

            }

                } while ( t.kind != PS4TokenizerConstants.EOF );

                br.close();
                bw1.close();
                bw2.close();

        }

  /** Generated Token Manager. */
  public PS4TokenizerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }

  /** Constructor with InputStream. */
  public PS4Tokenizer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PS4Tokenizer(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PS4TokenizerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PS4Tokenizer(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PS4TokenizerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PS4Tokenizer(PS4TokenizerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PS4TokenizerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
